from nano_chan.libs.kokoro_onnx import Kokoro
from threading import Thread,Event,Lock
from queue import Queue,Empty
import numpy as np

class VoiceGenerator:
    '''
    Module to generate the voice audio from text generated by LLM

    Args:
        input_q (Queue[str]): Queue to hold text for TTS.
        model_path (str): Path to the ONNX model for TTS.
        voice_path (str): Path to the voice data.
        voice (str): Voice to use for TTS.
        speed (float): Speed of the TTS.
        lang (str): Language for TTS.
    '''
    def __init__(self, input_q:Queue[str],
                  model_path="weights/kokoro-v1.0.onnx", 
                 voice_path="weights/voices-v1.0.bin", 
                 voice="af_heart", 
                 speed=1.0, 
                 lang="en-us"):

        self.input_q = input_q
        self.voice = voice
        self.speed = speed
        self.lang = lang
        self.lock = Lock()

        self.output_q = Queue() # Queue to hold audio samples
        self.generate_event = Event() # Event to indicate playback is in progress
        self._interrupt = False

        # create and warm up the model
        self.kokoro = Kokoro(model_path, voice_path)
        self.kokoro.create("Hello.", voice=self.voice, speed=self.speed, lang=self.lang)

    def start(self):
        self.is_running = True
        self.input_watch_thread = Thread(target=self._watch_queue, daemon=True)
        self.input_watch_thread.start()

    def _watch_queue(self):
        while self.is_running:
            self.generate_event.clear()

            text = self.input_q.get()
            if self._interrupt:
                self._interrupt=False
            self.generate_event.set()

            # stop flag
            if text is None:
                self.output_q.put((None, None))
                break
            if text.strip() == "":
                continue
            
            # run TTS
            try:
                samples, sample_rate = self.kokoro.create(
                    text,
                    voice=self.voice, speed=self.speed, lang=self.lang
                )
                # Resample to 48000 Hz from 24000 Hz
                new_sample_rate = 48000
                samples = np.interp(
                    np.linspace(0, len(samples), int(len(samples) * new_sample_rate / sample_rate), endpoint=False),
                    np.arange(len(samples)),
                    samples
                )
                if samples is not None and not self._interrupt:
                    self.output_q.put(samples)
                    
            except Exception:
                print("Error generating audio for text:", text)

    def interrupt(self):
        self._interrupt = True
        self._flush_queue()
        self.generate_event.clear() 

    def _flush_queue(self):
        with self.lock:
            while True:
                try:
                    self.output_q.get_nowait()
                except Empty:
                    break
     
    def close(self):
        self.is_running = False
        self.input_watch_thread.join()
        del self.kokoro
